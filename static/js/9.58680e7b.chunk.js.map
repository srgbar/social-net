{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.tsx"],"names":["module","exports","connect","state","isAuth","auth","captchaUrl","loginTC","props","validationSchema","Yup","shape","email","required","password","captcha","to","className","s","text","initialValues","rememberMe","onSubmit","values","setStatus","console","log","status","errors","touched","block","style","textAlign","href","target","rel","field","htmlFor","marginRight","name","type","placeholder","errorForm","form","spanError","button","disabled","errorServer","src"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,IAAM,mBAAmB,MAAQ,qBAAqB,KAAO,oBAAoB,UAAY,yBAAyB,UAAY,yBAAyB,OAAS,sBAAsB,YAAc,6B,iCCDlR,kFA8HeC,uBALS,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,cAGa,CAACC,aAA1BL,EAxGG,SAACM,GAGf,IAMMC,EAAmBC,MAAaC,MAAM,CACxCC,MAAOF,MACFG,SAAS,qBACdC,SAAUJ,MACLG,SAAS,qBACdE,QAASL,MACJG,SAAS,uBAGlB,OAAIL,EAAMJ,OACC,cAAC,IAAD,CAAUY,GAAI,aAIrB,sBAAKC,UAAWC,IAAEC,KAAlB,UACI,uCACA,cAAC,IAAD,CACIC,cAAe,CAACR,MAAO,GAAIE,SAAU,GAAIO,YAAY,EAAON,QAAS,KACrEN,iBAAkBA,EAClBa,SAzBG,SAACC,EAAD,GAA+E,IAAlDC,EAAiD,EAAjDA,UAExCC,QAAQC,IAAIH,GACZf,EAAMD,QAAQgB,EAAOX,MAAOW,EAAOT,SAAUS,EAAOF,WAAYE,EAAOR,QAASS,IAmB5E,SAKK,gBAAEG,EAAF,EAAEA,OAAQC,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,QAAlB,OACG,eAAC,IAAD,CAAMZ,UAAWC,IAAEY,MAAnB,UACI,sBAAKC,MAAO,CAACC,UAAW,UAAxB,UACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAI,aADzB,sBAIJ,wEACA,0DACA,kDAEJ,sBAAKlB,UAAWC,IAAEkB,MAAlB,UACI,uBAAOC,QAAQ,QAAQN,MAAO,CAACO,YAAa,GAA5C,mBACA,cAAC,IAAD,CAAOC,KAAK,QAAQC,KAAK,OAAOC,YAAY,QACrCxB,UAAWW,EAAOhB,OAASiB,EAAQjB,MAAQM,IAAEwB,UAAYxB,IAAEyB,UAGtE,sBAAM1B,UAAWW,EAAOhB,OAASiB,EAAQjB,MAAQM,IAAE0B,UAAY,GAA/D,SACShB,EAAOhB,OAASiB,EAAQjB,MACrB,8BAAMgB,EAAOhB,QAAe,OAExC,sBAAKK,UAAWC,IAAEkB,MAAlB,UACI,uBAAOC,QAAQ,WAAWN,MAAO,CAACO,YAAa,GAA/C,sBACA,cAAC,IAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWC,YAAY,WAC5CxB,UAAWW,EAAOd,UAAYe,EAAQf,SAAWI,IAAEwB,UAAYxB,IAAEyB,UAG5E,sBAAM1B,UAAWW,EAAOd,UAAYe,EAAQf,SAAWI,IAAE0B,UAAY,GAArE,SACShB,EAAOd,UAAYe,EAAQf,SACtB,8BAAMc,EAAOd,WAAkB,OAE7C,gCACI,cAAC,IAAD,CAAOyB,KAAK,aAAaC,KAAK,aADlC,iBAGA,8BACI,wBAAQA,KAAK,SACLvB,UAAWC,IAAE2B,OACbC,YAAclB,EAAOhB,OAASiB,EAAQjB,OACjCgB,EAAOd,UAAYe,EAAQf,UAC3Bc,EAAOb,SAAWc,EAAQd,SAJvC,sBAQJ,qBAAKE,UAAWC,IAAE6B,YAAlB,SACKpB,GAAU,8BAAMA,MAEpBnB,EAAMF,YACP,gCACI,8BACI,qBAAK0C,IAAKxC,EAAMF,eAEpB,gCACI,cAAC,IAAD,CAAOiC,KAAK,UAAUC,KAAK,OAAOC,YAAY,2BACvCxB,UAAWW,EAAOb,SAAWc,EAAQd,QAAUG,IAAEwB,UAAYxB,IAAEyB,OACtE,sBAAM1B,UAAWW,EAAOb,SAAWc,EAAQd,QAAUG,IAAE0B,UAAY,GAAnE,SACEhB,EAAOb,SAAWc,EAAQd,QACrB,8BAAMa,EAAOb,UAAiB","file":"static/js/9.58680e7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Login_text__2DXfY\",\"block\":\"Login_block__1a3rU\",\"img\":\"Login_img__Y2S1B\",\"field\":\"Login_field__Nq0ef\",\"form\":\"Login_form__xKzMB\",\"errorForm\":\"Login_errorForm__2gEio\",\"spanError\":\"Login_spanError__Kydi1\",\"button\":\"Login_button__2bBLt\",\"errorServer\":\"Login_errorServer__Hg2LU\"};","import React from \"react\";\r\nimport s from \"./Login.module.css\";\r\nimport * as Yup from \"yup\";\r\nimport {Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormDataLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginType = {\r\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha: string, setStatus: (status: string) => void) => void\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginPage = (props: LoginType) => {\r\n    debugger\r\n\r\n    const submit = (values: FormDataLoginType, {setStatus}: FormikHelpers<FormDataLoginType>) => {\r\n        debugger\r\n        console.log(values);\r\n        props.loginTC(values.email, values.password, values.rememberMe, values.captcha, setStatus)\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        email: Yup.string()\r\n            .required('Field is required'),\r\n        password: Yup.string()\r\n            .required('Field is required'),\r\n        captcha: Yup.string()\r\n            .required('Field is required')\r\n    });\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"profile/\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.text}>\r\n            <h1>login</h1>\r\n            <Formik\r\n                initialValues={{email: '', password: '', rememberMe: false, captcha: \" \"}}\r\n                validationSchema={validationSchema}\r\n                onSubmit={submit}\r\n            >\r\n                {({status, errors, touched}) => (\r\n                    <Form className={s.block}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'} rel=\"noreferrer\"> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </div>\r\n                        <div className={s.field}>\r\n                            <label htmlFor=\"email\" style={{marginRight: 5}}>Email</label>\r\n                            <Field name=\"email\" type=\"text\" placeholder=\"login\"\r\n                                   className={errors.email && touched.email ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span className={errors.email && touched.email ? s.spanError : \"\"}>\r\n                                {errors.email && touched.email ?\r\n                                    <div>{errors.email}</div> : null}\r\n                            </span>\r\n                        <div className={s.field}>\r\n                            <label htmlFor=\"password\" style={{marginRight: 5}}>Password</label>\r\n                            <Field name=\"password\" type=\"password\" placeholder=\"password\"\r\n                                   className={errors.password && touched.password ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span className={errors.password && touched.password ? s.spanError : \"\"}>\r\n                                {errors.password && touched.password\r\n                                    ? <div>{errors.password}</div> : null}\r\n                            </span>\r\n                        <div>\r\n                            <Field name=\"rememberMe\" type=\"checkbox\"/>remember me\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"submit\"\r\n                                    className={s.button}\r\n                                    disabled={!!((errors.email && touched.email) ||\r\n                                        (errors.password && touched.password) ||\r\n                                        (errors.captcha && touched.captcha))}\r\n                            >Submit\r\n                            </button>\r\n                        </div>\r\n                        <div className={s.errorServer}>\r\n                            {status && <div>{status}</div>}\r\n                        </div>\r\n                        {props.captchaUrl &&\r\n                        <div>\r\n                            <div>\r\n                                <img src={props.captchaUrl}/>\r\n                            </div>\r\n                            <div>\r\n                                <Field name=\"captcha\" type=\"text\" placeholder=\"enter symbols from image\"\r\n                                       className={errors.captcha && touched.captcha ? s.errorForm : s.form}/>\r\n                                <span className={errors.captcha && touched.captcha ? s.spanError : \"\"}>\r\n                                 {errors.captcha && touched.captcha\r\n                                     ? <div>{errors.captcha}</div> : null}\r\n                            </span>\r\n                            </div>\r\n                        </div>\r\n                        }\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, {loginTC})(LoginPage);"],"sourceRoot":""}