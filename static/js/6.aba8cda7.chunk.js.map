{"version":3,"sources":["components/Login/Login.module.css","components/Login/Login.tsx"],"names":["module","exports","connect","state","isAuth","auth","loginTC","props","validationSchema","Yup","shape","email","required","password","to","className","s","text","initialValues","rememberMe","onSubmit","values","setStatus","console","log","status","errors","touched","block","style","textAlign","href","target","rel","field","htmlFor","marginRight","name","type","placeholder","errorForm","form","spanError","button","disabled","errorServer"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,MAAQ,qBAAqB,KAAO,oBAAoB,UAAY,yBAAyB,UAAY,yBAAyB,OAAS,sBAAsB,YAAc,6B,iCCDzP,kFAsGeC,uBAJS,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,aAA1BJ,EAlFG,SAACK,GAEf,IAKMC,EAAmBC,MAAaC,MAAM,CACxCC,MAAOF,MACFG,SAAS,qBACdC,SAAUJ,MACLG,SAAS,uBAGlB,OAAIL,EAAMH,OACC,cAAC,IAAD,CAAUU,GAAI,aAIrB,sBAAKC,UAAWC,IAAEC,KAAlB,UACI,uCACA,cAAC,IAAD,CACIC,cAAe,CAACP,MAAO,GAAIE,SAAU,GAAIM,YAAY,GACrDX,iBAAkBA,EAClBY,SAtBG,SAACC,EAAD,GAA+E,IAAlDC,EAAiD,EAAjDA,UACxCC,QAAQC,IAAIH,GACZd,EAAMD,QAAQe,EAAOV,MAAOU,EAAOR,SAAUQ,EAAOF,WAAYG,IAiB5D,SAKK,gBAAEG,EAAF,EAAEA,OAAQC,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,QAAlB,OACG,eAAC,IAAD,CAAMZ,UAAWC,IAAEY,MAAnB,UACI,sBAAKC,MAAO,CAACC,UAAW,UAAxB,UACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SAAUC,IAAI,aADzB,sBAIJ,wEACA,0DACA,kDAEJ,sBAAKlB,UAAWC,IAAEkB,MAAlB,UACI,uBAAOC,QAAQ,QAAQN,MAAO,CAACO,YAAa,GAA5C,mBACA,cAAC,IAAD,CAAOC,KAAK,QAAQC,KAAK,OAAOC,YAAY,QACrCxB,UAAWW,EAAOf,OAASgB,EAAQhB,MAAQK,IAAEwB,UAAYxB,IAAEyB,UAGtE,sBAAM1B,UAAWW,EAAOf,OAASgB,EAAQhB,MAAQK,IAAE0B,UAAY,GAA/D,SACShB,EAAOf,OAASgB,EAAQhB,MACrB,8BAAMe,EAAOf,QAAe,OAExC,sBAAKI,UAAWC,IAAEkB,MAAlB,UACI,uBAAOC,QAAQ,WAAWN,MAAO,CAACO,YAAa,GAA/C,sBACA,cAAC,IAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWC,YAAY,WAC5CxB,UAAWW,EAAOb,UAAYc,EAAQd,SAAWG,IAAEwB,UAAYxB,IAAEyB,UAG5E,sBAAM1B,UAAWW,EAAOb,UAAYc,EAAQd,SAAWG,IAAE0B,UAAY,GAArE,SACShB,EAAOb,UAAYc,EAAQd,SACtB,8BAAMa,EAAOb,WAAkB,OAE7C,gCACI,cAAC,IAAD,CAAOwB,KAAM,aAAcC,KAAM,aADrC,iBAGA,8BACI,wBAAQA,KAAK,SACLvB,UAAWC,IAAE2B,OACbC,YAAclB,EAAOf,OAASgB,EAAQhB,OAAWe,EAAOb,UAAYc,EAAQd,UAFpF,sBAMJ,qBAAKE,UAAWC,IAAE6B,YAAlB,SACKpB,GAAU,8BAAMA","file":"static/js/6.aba8cda7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Login_text__3JcrR\",\"block\":\"Login_block__3cC42\",\"field\":\"Login_field__zwv7E\",\"form\":\"Login_form__2GBF_\",\"errorForm\":\"Login_errorForm__2UlQK\",\"spanError\":\"Login_spanError__2u8eI\",\"button\":\"Login_button__1V7CU\",\"errorServer\":\"Login_errorServer__33RIo\"};","import React from \"react\";\r\nimport s from \"./Login.module.css\";\r\nimport * as Yup from \"yup\";\r\nimport {Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {loginTC} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormDataLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginType = {\r\n    loginTC: (email: string, password: string, rememberMe: boolean, setStatus: (status: string) => void) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst LoginPage = (props: LoginType) => {\r\n\r\n    const submit = (values: FormDataLoginType, {setStatus}: FormikHelpers<FormDataLoginType>) => {\r\n        console.log(values);\r\n        props.loginTC(values.email, values.password, values.rememberMe, setStatus)\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        email: Yup.string()\r\n            .required('Field is required'),\r\n        password: Yup.string()\r\n            .required('Field is required')\r\n    });\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"profile/\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.text}>\r\n            <h1>login</h1>\r\n            <Formik\r\n                initialValues={{email: '', password: '', rememberMe: false}}\r\n                validationSchema={validationSchema}\r\n                onSubmit={submit}\r\n            >\r\n                {({status, errors, touched}) => (\r\n                    <Form className={s.block}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'} rel=\"noreferrer\"> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </div>\r\n                        <div className={s.field}>\r\n                            <label htmlFor=\"email\" style={{marginRight: 5}}>Email</label>\r\n                            <Field name=\"email\" type=\"text\" placeholder=\"login\"\r\n                                   className={errors.email && touched.email ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span className={errors.email && touched.email ? s.spanError : \"\"}>\r\n                                {errors.email && touched.email ?\r\n                                    <div>{errors.email}</div> : null}\r\n                            </span>\r\n                        <div className={s.field}>\r\n                            <label htmlFor=\"password\" style={{marginRight: 5}}>Password</label>\r\n                            <Field name=\"password\" type=\"password\" placeholder=\"password\"\r\n                                   className={errors.password && touched.password ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span className={errors.password && touched.password ? s.spanError : \"\"}>\r\n                                {errors.password && touched.password\r\n                                    ? <div>{errors.password}</div> : null}\r\n                            </span>\r\n                        <div>\r\n                            <Field name={\"rememberMe\"} type={\"checkbox\"}/>remember me\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"submit\"\r\n                                    className={s.button}\r\n                                    disabled={!!((errors.email && touched.email) || (errors.password && touched.password))}\r\n                            >Submit\r\n                            </button>\r\n                        </div>\r\n                        <div className={s.errorServer}>\r\n                            {status && <div>{status}</div>}\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {loginTC})(LoginPage);"],"sourceRoot":""}