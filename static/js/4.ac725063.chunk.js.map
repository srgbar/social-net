{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/common/AddNewMessageForm/AddNewMessageForm.tsx","components/common/AddNewMessageForm/AddNewMessageForm.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileDataForm.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","AddNewMessageForm","validationSchema","Yup","shape","newMessageText","max","required","initialValues","onSubmit","values","addPost","errors","touched","className","s","formik","name","type","placeholder","inputError","input","buttonError","button","titleOfButton","spanError","module","exports","Post","postsElements","posts","reverse","map","p","item","src","smallImage","postAvatar","message","onClick","id","increase","icon","faHeart","style","color","likesCount","MyPosts","React","memo","postsBlock","header","increaseLike","MyPostContainer","profilePage","profile","photos","small","dispatch","addPostAC","postId","increaseLikeAC","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataForm","fullName","aboutMe","min","lookingForAJobDescription","actions","changeProfileData","setSubmitting","then","deactivateEditMode","isSubmitting","formContainer","formButton","faPlus","faReply","blockInfoUser","field","errorForm","form","checkboxField","lookingForAJob","Object","keys","contacts","key","index","errorServer","ProfileInfo","Preloader","descriptionBlock","groopOfNameAndStatus","isOwner","blockPhotoAndInfoUser","photo","userPhoto","alt","faPaintBrush","buttonLoad","target","files","savePhoto","onActivateEditMode","ProfileData","faPen","marginTop","facebook","vk","twitter","instagram","mainLink","github","website","youtube","contactTitle","contactValue","Contacts","href","Profile","container","updateStatusTC","savePhotoTC","changeProfileDataTC","ProfileContainer","userId","Number","this","match","params","authorizedUserId","getUserProfileTC","getStatusTC","refreshProfile","prevProps","prevState","compose","data","withRouter"],"mappings":"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","file":"static/js/4.ac725063.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype mapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStatePropsType) => {\r\n        const{isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent;\r\n}","import React from \"react\";\r\nimport s from \"./AddNewMessageForm.module.css\";\r\nimport * as Yup from \"yup\";\r\nimport {Field, Form, Formik, FormikHelpers} from \"formik\";\r\n\r\n\r\ntype FormMessageType = {\r\n    newMessageText: string\r\n}\r\n\r\ntype AddNewMessageFormType = {\r\n    addPost: (newMessageText: string) => void\r\n    placeholder: string\r\n    titleOfButton: string\r\n}\r\n\r\nconst AddNewMessageForm = (props: AddNewMessageFormType) => {\r\n\r\n    const submit = (values: FormMessageType) => {\r\n        props.addPost(values.newMessageText);\r\n        // values.newMessageText = \"\"\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        newMessageText: Yup.string()\r\n            // .min(2, 'Too short message!')\r\n            .max(100, 'Maximum length is 100 symbols!')\r\n            .required('Field is required')\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{newMessageText: \"\"}}\r\n            validationSchema={validationSchema}\r\n            onSubmit={submit}\r\n        >\r\n            {({errors, touched}) => (\r\n                <Form>\r\n                    <div className={s.formik}>\r\n                        <Field\r\n                            name=\"newMessageText\"\r\n                            type=\"text\"\r\n                            placeholder={props.placeholder}\r\n                            className={errors.newMessageText && touched.newMessageText ? s.inputError : s.input}\r\n                        />\r\n                        <button\r\n                            type=\"submit\"\r\n                            className={errors.newMessageText && touched.newMessageText ? s.buttonError : s.button}\r\n                        >{props.titleOfButton}\r\n                        </button>\r\n                    </div>\r\n                    <span className={errors.newMessageText && touched.newMessageText ? s.spanError : \"\"}>\r\n                        {errors.newMessageText && touched.newMessageText ?\r\n                            <div>{errors.newMessageText}</div> : null}\r\n                    </span>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddNewMessageForm;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formik\":\"AddNewMessageForm_formik__3yLN5\",\"input\":\"AddNewMessageForm_input__1wYKU\",\"inputError\":\"AddNewMessageForm_inputError__u-UtJ\",\"button\":\"AddNewMessageForm_button__3QaL2\",\"buttonError\":\"AddNewMessageForm_buttonError__1M4fx\",\"spanError\":\"AddNewMessageForm_spanError__t_AbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Profile_container__3ikNy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2BN-m\",\"header\":\"MyPosts_header__3BaIo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__14rwi\",\"posts\":\"Post_posts__1ogpz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2huFu\",\"groopOfNameAndStatus\":\"ProfileInfo_groopOfNameAndStatus__3HtaG\",\"fullName\":\"ProfileInfo_fullName__F1QHL\",\"status\":\"ProfileInfo_status__2l_k2\",\"blockPhotoAndInfoUser\":\"ProfileInfo_blockPhotoAndInfoUser__2OvjX\",\"photo\":\"ProfileInfo_photo__aeHPQ\",\"formContainer\":\"ProfileInfo_formContainer__3RIkf\",\"formButton\":\"ProfileInfo_formButton__1lfi0\",\"button\":\"ProfileInfo_button__4qXh5\",\"blockInfoUser\":\"ProfileInfo_blockInfoUser__vBFek\",\"field\":\"ProfileInfo_field__2j0e7\",\"buttonLoad\":\"ProfileInfo_buttonLoad__366sw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"ProfileDataForm_formContainer__3DNaD\",\"formButton\":\"ProfileDataForm_formButton__1_64M\",\"button\":\"ProfileDataForm_button__3_A3A\",\"blockInfoUser\":\"ProfileDataForm_blockInfoUser__352t1\",\"field\":\"ProfileDataForm_field__vL1nI\",\"form\":\"ProfileDataForm_form__RQlkt\",\"checkboxField\":\"ProfileDataForm_checkboxField__10peC\",\"errorServer\":\"ProfileDataForm_errorServer__fGw6F\",\"errorForm\":\"ProfileDataForm_errorForm__1pQZg\",\"spanError\":\"ProfileDataForm_spanError__3-pMR\",\"contactFields\":\"ProfileDataForm_contactFields__Ce3wN\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostsType} from \"../../../../redux/profile-reducer\";\r\nimport postAvatar from \"../../../../assets/images/user.png\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHeart} from \"@fortawesome/free-solid-svg-icons/faHeart\";\r\n\r\ntype PostPropsType = {\r\n    posts: Array<PostsType>\r\n    smallImage: string\r\n    increase: (id: number) => void\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n\r\n    const increase = (id: number) => {\r\n        props.increase(id)\r\n    }\r\n\r\n    const postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <div key={p.id}>\r\n                    <div className={s.item}>\r\n                        <div>\r\n                            <img src={props.smallImage ? props.smallImage : postAvatar}/>\r\n\r\n                            {\" \" + p.message}\r\n                        </div>\r\n                        <div onClick={() => increase(p.id)}>\r\n                            <FontAwesomeIcon icon={faHeart} style={{color: \"palevioletred\"}}/> {p.likesCount}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n    return (\r\n        <div className={s.posts}>\r\n            {postsElements}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Post} from \"./Post/Post\";\r\nimport AddNewMessageForm from \"../../common/AddNewMessageForm/AddNewMessageForm\";\r\n\r\n\r\nconst MyPosts = React.memo<MyPostsPropsType>(props => {\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2 className={s.header}>My posts</h2>\r\n            <div>\r\n                <AddNewMessageForm\r\n                    addPost={props.addPost}\r\n                    placeholder={\"Your message\"}\r\n                    titleOfButton={\"Add post\"}\r\n                />\r\n                <Post posts={props.posts}\r\n                      smallImage={props.smallImage}\r\n                      increase={props.increaseLike}\r\n                />\r\n            </div>\r\n        </div>)\r\n})\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, increaseLikeAC, PostsType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n    smallImage: string\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newMessageText: string) => void\r\n    increaseLike: (postId: number) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        smallImage: state.profilePage.profile.photos.small\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newMessageText) => {\r\n            dispatch(addPostAC(newMessageText))\r\n        },\r\n        increaseLike: (postId) => {\r\n            dispatch(increaseLikeAC(postId))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {ProfilesType} from \"../../../redux/profile-reducer\";\r\n\r\nexport type StatusPropsType = {\r\n    profile: ProfilesType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: StatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>{props.status || \"I have not status\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import {ContactsType} from \"../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport s from \"./ProfileDataForm.module.css\";\r\nimport {Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faReply} from \"@fortawesome/free-solid-svg-icons/faReply\";\r\nimport {faPlus} from \"@fortawesome/free-solid-svg-icons/faPlus\";\r\n\r\nexport type FormProfileDataType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts: ContactsType\r\n}\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: FormProfileDataType\r\n    changeProfileData: (profile: FormProfileDataType,\r\n                        setStatus: (status: string) => void,\r\n                        setSubmitting: (isSubmitting: boolean) => void) => any\r\n    deactivateEditMode: () => void\r\n}\r\n\r\nconst ProfileDataForm = (props: ProfileDataFormPropsType) => {\r\n\r\n    const submit = (values: FormProfileDataType, actions: FormikHelpers<FormProfileDataType>) => {\r\n        props.changeProfileData(values, actions.setStatus, actions.setSubmitting).then(() => {\r\n            props.deactivateEditMode()\r\n        })\r\n        // console.log(actions.setStatus, actions.setSubmitting)\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        fullName: Yup.string()\r\n            .required('Field is required'),\r\n        aboutMe: Yup.string()\r\n            .required('Field is required')\r\n            .min(10, 'Min length is 10 symbols!'),\r\n        lookingForAJobDescription: Yup.string()\r\n            .required('Field is required')\r\n            .min(10, 'Min length is 10 symbols!'),\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={props.profile}\r\n            validationSchema={validationSchema}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting, status, errors, touched}) => (\r\n                <Form className={s.formContainer}>\r\n                    <div className={s.formButton}>\r\n                        <button type=\"submit\" className={s.button}><FontAwesomeIcon icon={faPlus}/></button>\r\n                        <button onClick={props.deactivateEditMode} className={s.button}><FontAwesomeIcon icon={faReply}/></button>\r\n                    </div>\r\n                    <div className={s.blockInfoUser}>\r\n                        <div className={s.field}>\r\n                            <span><b>Full name: </b></span>\r\n                            <Field name=\"fullName\" type=\"text\"\r\n                                   className={errors.fullName && touched.fullName ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span className={errors.fullName && touched.fullName ? s.spanError : \"\"}>\r\n                                {errors.fullName && touched.fullName ?\r\n                                    <div>{errors.fullName}</div> : null}\r\n                            </span>\r\n                        <div className={s.field}>\r\n                            <span><b>About me: </b></span>\r\n                            <Field name=\"aboutMe\" type=\"text\"\r\n                                   className={errors.aboutMe && touched.aboutMe ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span className={errors.aboutMe && touched.aboutMe ? s.spanError : \"\"}>\r\n                                {errors.aboutMe && touched.aboutMe ?\r\n                                    <div>{errors.aboutMe}</div> : null}\r\n                            </span>\r\n                        <div className={s.checkboxField}>\r\n                            <span><b>Looking for a job: </b></span>\r\n                            <Field name=\"lookingForAJob\" type=\"checkbox\"\r\n                                   className={errors.lookingForAJob && touched.lookingForAJob ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <div className={s.field}>\r\n                            <span><b>My skills: </b></span>\r\n                            <Field name=\"lookingForAJobDescription\" type=\"text\"\r\n                                   className={errors.lookingForAJobDescription && touched.lookingForAJobDescription ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span\r\n                            className={errors.lookingForAJobDescription && touched.lookingForAJobDescription ? s.spanError : \"\"}>\r\n                                {errors.lookingForAJobDescription && touched.lookingForAJobDescription ?\r\n                                    <div>{errors.lookingForAJobDescription}</div> : null}\r\n                            </span>\r\n                        <div>\r\n                            <b>Contacts</b>: {(Object.keys(props.profile.contacts) as Array<keyof ContactsType>).map((key, index) => {\r\n                            return <div key={key} className={s.field}>\r\n                                <span>{key}: </span><Field name={\"contacts.\" + key} type=\"text\" className={s.form}/>\r\n                            </div>\r\n                        })}\r\n                        </div>\r\n                        <span className={s.errorServer}>\r\n                            {isSubmitting && status && <div>{status}</div>}\r\n                        </span>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ProfileDataForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport {ContactsType, ProfilesType} from \"../../../redux/profile-reducer\";\r\nimport {faPen} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport ProfileDataForm, {FormProfileDataType} from \"./ProfileDataForm\";\r\nimport {faPaintBrush} from \"@fortawesome/free-solid-svg-icons/faPaintBrush\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfilesType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: Blob) => void\r\n    changeProfileData: (profile: FormProfileDataType) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onActivateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <div className={s.groopOfNameAndStatus}>\r\n                <div className={s.fullName}>\r\n                    {props.profile.fullName}\r\n                </div>\r\n                <div className={s.status}>\r\n                    {props.isOwner\r\n                        ? <ProfileStatusWithHooks profile={props.profile} status={props.status}\r\n                                                  updateStatus={props.updateStatus}/>\r\n                        : props.status || \"I have not status\"\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={s.blockPhotoAndInfoUser}>\r\n                <div className={s.photo}>\r\n                    <img src={props.profile.photos.small != null ? props.profile.photos.small : userPhoto}\r\n                         alt={\"user photo\"}/>\r\n                    {props.isOwner\r\n                        ? <label>\r\n                            <FontAwesomeIcon icon={faPaintBrush} className={s.buttonLoad}/>\r\n                            <input type=\"file\" onChange={onMainPhotoSelected}/>\r\n                        </label>\r\n                        : \"\"\r\n                    }\r\n                </div>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm profile={props.profile}\r\n                                       changeProfileData={props.changeProfileData}\r\n                                       deactivateEditMode={deactivateEditMode}\r\n                    />\r\n                    : <ProfileData profile={props.profile}\r\n                                   isOwner={props.isOwner}\r\n                                   onActivateEditMode={onActivateEditMode}\r\n                    />}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfilesType\r\n    isOwner: boolean\r\n    onActivateEditMode: () => void\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <div className={s.formContainer}>\r\n            {props.isOwner && <div className={s.formButton}>\r\n                <button onClick={props.onActivateEditMode} className={s.button}><FontAwesomeIcon icon={faPen}/></button>\r\n            </div>}\r\n            <div className={s.blockInfoUser}>\r\n                {props.profile.aboutMe\r\n                    ? <div className={s.field}><b style={{color: \"chocolate\"}}>About me: </b> {props.profile.aboutMe}\r\n                    </div>\r\n                    : \"\"\r\n                }\r\n                <div className={s.field}><b style={{color: \"chocolate\"}}>Looking for a\r\n                    job: </b> {props.profile.lookingForAJob ? \"Open to work\" : \"Busy\"}</div>\r\n                <div className={s.field}><b style={{color: \"chocolate\"}}>My\r\n                    skills: </b> {props.profile.lookingForAJobDescription ? props.profile.lookingForAJobDescription : \"the field is not filled\"}</div>\r\n                <div className={s.field} style={{marginTop: 15}}>\r\n\r\n                    {\r\n                        props.profile.contacts.facebook ||\r\n                        props.profile.contacts.vk ||\r\n                        props.profile.contacts.twitter ||\r\n                        props.profile.contacts.instagram ||\r\n                        props.profile.contacts.mainLink ||\r\n                        props.profile.contacts.github ||\r\n                        props.profile.contacts.website ||\r\n                        props.profile.contacts.youtube\r\n\r\n                            ? <>\r\n                                <b style={{color: \"chocolate\"}}>Contacts: </b>{(Object.keys(props.profile.contacts) as Array<keyof ContactsType>).map((key, index) => {\r\n                                return <Contacts key={index} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n                            })}\r\n                            </>\r\n                            : <div>\r\n                                <b style={{color: \"chocolate\"}}>Contacts: </b>no contacts\r\n                            </div>\r\n                    }\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string | null\r\n    contactValue: string | null\r\n}\r\n\r\nconst Contacts = (props: ContactsPropsType) => {\r\n    return (\r\n        <div>\r\n            <ul className={s.field}>\r\n                {props.contactValue\r\n                    ? <li>\r\n                        <b style={{color: \"chocolate\"}}>{props.contactTitle}</b>: <a\r\n                        href={props.contactValue ? props.contactValue : \"\"}>\r\n                        {props.contactValue ? props.contactValue : \"\"}</a>\r\n                    </li>\r\n                    : null}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {MyPostContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\n\r\nconst Profile = (props: ProfileContainerPropsType) => {\r\n    return (\r\n        <div className={s.container}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatusTC}\r\n                         isOwner={props.isOwner ? props.isOwner : false}\r\n                         savePhoto={props.savePhotoTC}\r\n                         changeProfileData={props.changeProfileDataTC}\r\n            />\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {\r\n    changeProfileDataTC,\r\n    getStatusTC,\r\n    getUserProfileTC,\r\n    ProfilesType,\r\n    savePhotoTC,\r\n    updateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport Profile from \"./Profile\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {FormProfileDataType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfilesType\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n    isOwner?: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfileTC: (userId: number) => void\r\n    getStatusTC: (userId: number) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC: (file: Blob) => void\r\n    changeProfileDataTC: (profile: FormProfileDataType) => void\r\n}\r\nexport type ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            // if (!userId) {\r\n            //     this.props.history.push(\"/login\");\r\n            // }\r\n        }\r\n        this.props.getUserProfileTC(userId);\r\n        this.props.getStatusTC(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatusTC={this.props.updateStatusTC}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhotoTC={this.props.savePhotoTC}\r\n                     changeProfileDataTC={this.props.changeProfileDataTC}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.data.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            getUserProfileTC,\r\n            getStatusTC,\r\n            updateStatusTC,\r\n            savePhotoTC,\r\n            changeProfileDataTC\r\n        }), withRouter, withAuthRedirect)(ProfileContainer)"],"sourceRoot":""}