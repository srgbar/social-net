{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/common/AddNewMessageForm/AddNewMessageForm.tsx","components/common/AddNewMessageForm/AddNewMessageForm.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileDataForm.module.css","assets/images/postAvatar.png","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","AddNewMessageForm","validationSchema","Yup","shape","newMessageText","max","required","initialValues","onSubmit","values","addPost","errors","touched","className","s","formik","name","type","placeholder","inputError","input","buttonError","button","titleOfButton","spanError","module","exports","Post","postsElements","posts","reverse","map","p","item","src","smallImage","postAvatar","message","likesCount","id","MyPosts","React","memo","postsBlock","header","MyPostContainer","profilePage","profile","photos","small","dispatch","addPostAC","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataForm","fullName","aboutMe","min","lookingForAJobDescription","actions","changeProfileData","setSubmitting","then","deactivateEditMode","isSubmitting","formContainer","formButton","icon","faCheck","onClick","blockInfoUser","field","errorForm","form","checkboxField","lookingForAJob","Object","keys","contacts","key","index","errorServer","ProfileInfo","Preloader","descriptionBlock","groopOfNameAndStatus","isOwner","blockPhotoAndInfoUser","photo","userPhoto","faFileImage","buttonLoad","target","files","savePhoto","onActivateEditMode","ProfileData","faPen","style","color","marginTop","facebook","vk","twitter","instagram","mainLink","github","website","youtube","contactTitle","contactValue","Contacts","href","Profile","container","updateStatusTC","savePhotoTC","changeProfileDataTC","ProfileContainer","userId","Number","this","match","params","authorizedUserId","getUserProfileTC","getStatusTC","refreshProfile","prevProps","prevState","compose","data","withRouter"],"mappings":"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","file":"static/js/4.4ba5738a.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype mapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStatePropsType) => {\r\n        const{isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent;\r\n}","import React from \"react\";\r\nimport s from \"./AddNewMessageForm.module.css\";\r\nimport * as Yup from \"yup\";\r\nimport {Field, Form, Formik} from \"formik\";\r\n\r\n\r\ntype FormMessageType = {\r\n    newMessageText: string\r\n}\r\n\r\ntype AddNewMessageFormType = {\r\n    addPost: (newMessageText: string) => void\r\n    placeholder: string\r\n    titleOfButton: string\r\n}\r\n\r\nconst AddNewMessageForm = (props: AddNewMessageFormType) => {\r\n\r\n    const submit = (values: FormMessageType) => {\r\n        props.addPost(values.newMessageText)\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        newMessageText: Yup.string()\r\n            // .min(2, 'Too short message!')\r\n            .max(100, 'Maximum length is 100 symbols!')\r\n            .required('Field is required')\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{newMessageText: \"\"}}\r\n            validationSchema={validationSchema}\r\n            onSubmit={submit}\r\n        >\r\n            {({errors, touched}) => (\r\n                <Form>\r\n                    <div className={s.formik}>\r\n                        <Field\r\n                            name=\"newMessageText\"\r\n                            type=\"text\"\r\n                            placeholder={props.placeholder}\r\n                            className={errors.newMessageText && touched.newMessageText ? s.inputError : s.input}\r\n                        />\r\n                        <button\r\n                            type=\"submit\"\r\n                            className={errors.newMessageText && touched.newMessageText ? s.buttonError : s.button}\r\n                        >{props.titleOfButton}\r\n                        </button>\r\n                    </div>\r\n                    <span className={errors.newMessageText && touched.newMessageText ? s.spanError : \"\"}>\r\n                        {errors.newMessageText && touched.newMessageText ?\r\n                            <div>{errors.newMessageText}</div> : null}\r\n                    </span>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddNewMessageForm;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formik\":\"AddNewMessageForm_formik__1jxWp\",\"input\":\"AddNewMessageForm_input__1VJnl\",\"inputError\":\"AddNewMessageForm_inputError__2aTd3\",\"button\":\"AddNewMessageForm_button__26kvF\",\"buttonError\":\"AddNewMessageForm_buttonError__2neke\",\"spanError\":\"AddNewMessageForm_spanError__DllhW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3YBwB\",\"container\":\"Profile_container__3itio\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__QUewd\",\"header\":\"MyPosts_header__AFYWx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1oM6o\",\"posts\":\"Post_posts__3JLMp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3SVUt\",\"groopOfNameAndStatus\":\"ProfileInfo_groopOfNameAndStatus__RNhyv\",\"fullName\":\"ProfileInfo_fullName__a9d5B\",\"status\":\"ProfileInfo_status__qjBIM\",\"blockPhotoAndInfoUser\":\"ProfileInfo_blockPhotoAndInfoUser__3zzVx\",\"photo\":\"ProfileInfo_photo__bIzVm\",\"formContainer\":\"ProfileInfo_formContainer__3JMfG\",\"formButton\":\"ProfileInfo_formButton__ra1Xw\",\"button\":\"ProfileInfo_button__21SuV\",\"blockInfoUser\":\"ProfileInfo_blockInfoUser__WxX7-\",\"field\":\"ProfileInfo_field__I8gAB\",\"buttonLoad\":\"ProfileInfo_buttonLoad__3qKCj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"ProfileDataForm_formContainer__DfPEX\",\"formButton\":\"ProfileDataForm_formButton__1SsIg\",\"button\":\"ProfileDataForm_button__1BOR2\",\"blockInfoUser\":\"ProfileDataForm_blockInfoUser__lMahk\",\"field\":\"ProfileDataForm_field__2TKTx\",\"form\":\"ProfileDataForm_form__1PYt-\",\"checkboxField\":\"ProfileDataForm_checkboxField__XXZhI\",\"errorServer\":\"ProfileDataForm_errorServer__oj7eY\",\"errorForm\":\"ProfileDataForm_errorForm__G2cW8\",\"spanError\":\"ProfileDataForm_spanError__RHKkp\",\"contactFields\":\"ProfileDataForm_contactFields__3YHUd\"};","export default __webpack_public_path__ + \"static/media/postAvatar.efb4f6bc.png\";","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostsType} from \"../../../../redux/profile-reducer\";\r\nimport postAvatar from \"../../../../assets/images/postAvatar.png\";\r\n\r\ntype PostPropsType = {\r\n    posts: Array<PostsType>\r\n    smallImage: string | null\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n\r\n    const postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <div key={p.id}>\r\n                    <div className={s.item}>\r\n                        <img src={props.smallImage ? props.smallImage : postAvatar}/>\r\n                        {p.message}\r\n                        <div>\r\n                            <span>Like </span>{p.likesCount}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n    return (\r\n        <div className={s.posts}>\r\n            {postsElements}\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Post} from \"./Post/Post\";\r\nimport AddNewMessageForm from \"../../common/AddNewMessageForm/AddNewMessageForm\";\r\n\r\n\r\nconst MyPosts = React.memo<MyPostsPropsType>(props => {\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2 className={s.header}>My posts</h2>\r\n            <div>\r\n                <AddNewMessageForm\r\n                    addPost={props.addPost}\r\n                    placeholder={\"Your message\"}\r\n                    titleOfButton={\"Add post\"}\r\n                />\r\n                <Post posts={props.posts}\r\n                      smallImage={props.smallImage}\r\n                />\r\n            </div>\r\n        </div>)\r\n})\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {addPostAC, PostsType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n    smallImage: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newMessageText: string) => void\r\n}\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        smallImage: state.profilePage.profile.photos.small\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newMessageText) => {\r\n            dispatch(addPostAC(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {ProfilesType} from \"../../../redux/profile-reducer\";\r\n\r\nexport type StatusPropsType = {\r\n    profile: ProfilesType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: StatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>{props.status || \"I have not status\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import {ContactsType} from \"../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport s from \"./ProfileDataForm.module.css\";\r\nimport {Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {faCheck} from \"@fortawesome/free-solid-svg-icons/faCheck\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nexport type FormProfileDataType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n    contacts: ContactsType\r\n}\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: FormProfileDataType\r\n    changeProfileData: (profile: FormProfileDataType,\r\n                        setStatus: (status: string) => void,\r\n                        setSubmitting: (isSubmitting: boolean) => void) => any\r\n    deactivateEditMode: () => void\r\n}\r\n\r\nconst ProfileDataForm = (props: ProfileDataFormPropsType) => {\r\n\r\n    const submit = (values: FormProfileDataType, actions: FormikHelpers<FormProfileDataType>) => {\r\n        props.changeProfileData(values, actions.setStatus, actions.setSubmitting).then( () => {\r\n                props.deactivateEditMode()\r\n            })\r\n        // console.log(actions.setStatus, actions.setSubmitting)\r\n    }\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        fullName: Yup.string()\r\n            .required('Field is required'),\r\n        aboutMe: Yup.string()\r\n            .required('Field is required')\r\n            .min(10, 'Min length is 10 symbols!'),\r\n        lookingForAJobDescription: Yup.string()\r\n            .required('Field is required')\r\n            .min(10, 'Min length is 10 symbols!'),\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={props.profile}\r\n            validationSchema={validationSchema}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting, status, errors, touched}) => (\r\n                <Form className={s.formContainer}>\r\n                    <div className={s.formButton}>\r\n                        <button type=\"submit\" className={s.button}><FontAwesomeIcon icon={faCheck}/></button>\r\n                        <button onClick={props.deactivateEditMode} className={s.button}>x</button>\r\n                    </div>\r\n                    <div className={s.blockInfoUser}>\r\n                        <div className={s.field}>\r\n                            <span><b>Full name: </b></span>\r\n                            <Field name=\"fullName\" type=\"text\"\r\n                                   className={errors.fullName && touched.fullName ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span className={errors.fullName && touched.fullName ? s.spanError : \"\"}>\r\n                                {errors.fullName && touched.fullName ?\r\n                                    <div>{errors.fullName}</div> : null}\r\n                            </span>\r\n                        <div className={s.field}>\r\n                            <span><b>About me: </b></span>\r\n                            <Field name=\"aboutMe\" type=\"text\"\r\n                                   className={errors.aboutMe && touched.aboutMe ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span className={errors.aboutMe && touched.aboutMe ? s.spanError : \"\"}>\r\n                                {errors.aboutMe && touched.aboutMe ?\r\n                                    <div>{errors.aboutMe}</div> : null}\r\n                            </span>\r\n                        <div className={s.checkboxField}>\r\n                            <span><b>Looking for a job: </b></span>\r\n                            <Field name=\"lookingForAJob\" type=\"checkbox\"\r\n                                   className={errors.lookingForAJob && touched.lookingForAJob ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <div className={s.field}>\r\n                            <span><b>My skills: </b></span>\r\n                            <Field name=\"lookingForAJobDescription\" type=\"text\"\r\n                                   className={errors.lookingForAJobDescription && touched.lookingForAJobDescription ? s.errorForm : s.form}\r\n                            />\r\n                        </div>\r\n                        <span className={errors.lookingForAJobDescription && touched.lookingForAJobDescription ? s.spanError : \"\"}>\r\n                                {errors.lookingForAJobDescription && touched.lookingForAJobDescription ?\r\n                                    <div>{errors.lookingForAJobDescription}</div> : null}\r\n                            </span>\r\n                        <div>\r\n                            <b>Contacts</b>: {(Object.keys(props.profile.contacts) as Array<keyof ContactsType>).map((key, index) => {\r\n                            return <div key={key} className={s.field}>\r\n                                <span>{key}: </span><Field name={\"contacts.\" + key} type=\"text\" className={s.form}/>\r\n                            </div>\r\n                        })}\r\n                        </div>\r\n                        <div className={s.errorServer}>\r\n                            {isSubmitting && status && <div>{status}</div>}\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ProfileDataForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport {ContactsType, ProfilesType} from \"../../../redux/profile-reducer\";\r\nimport {faFileImage, faPen} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport ProfileDataForm, {FormProfileDataType} from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfilesType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: Blob) => void\r\n    changeProfileData: (profile: FormProfileDataType) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onActivateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.groopOfNameAndStatus}>\r\n                    <div className={s.fullName}>\r\n                        {props.profile.fullName}\r\n                    </div>\r\n                    <div className={s.status}>\r\n                        {props.isOwner\r\n                            ? <ProfileStatusWithHooks profile={props.profile} status={props.status}\r\n                                                      updateStatus={props.updateStatus}/>\r\n                            : props.status || \"I have not status\"\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={s.blockPhotoAndInfoUser}>\r\n                    <div className={s.photo}>\r\n                        <img src={props.profile.photos.small != null ? props.profile.photos.small : userPhoto}/>\r\n                        {props.isOwner\r\n                            ? <label>\r\n                                <FontAwesomeIcon icon={faFileImage} className={s.buttonLoad}/>\r\n                                <input type=\"file\" onChange={onMainPhotoSelected}/>\r\n                            </label>\r\n                            : \"\"\r\n                        }\r\n                    </div>\r\n\r\n                    {editMode\r\n                        ? <ProfileDataForm profile={props.profile}\r\n                                           changeProfileData={props.changeProfileData}\r\n                                           deactivateEditMode={deactivateEditMode}\r\n                        />\r\n                        : <ProfileData profile={props.profile}\r\n                                       isOwner={props.isOwner}\r\n                                       onActivateEditMode={onActivateEditMode}\r\n                        />}\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfilesType\r\n    isOwner: boolean\r\n    onActivateEditMode: () => void\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <div className={s.formContainer}>\r\n            {props.isOwner && <div className={s.formButton}>\r\n                <button onClick={props.onActivateEditMode} className={s.button}><FontAwesomeIcon icon={faPen}/></button>\r\n            </div>}\r\n            <div className={s.blockInfoUser}>\r\n                <div className={s.field}><b style={{color: \"chocolate\"}}>About me: </b> {props.profile.aboutMe}</div>\r\n                <div className={s.field}><b style={{color: \"chocolate\"}}>Looking for a\r\n                    job: </b> {props.profile.lookingForAJob ? \"Open to work\" : \"Busy\"}</div>\r\n                <div className={s.field}><b style={{color: \"chocolate\"}}>My\r\n                    skills: </b> {props.profile.lookingForAJobDescription}</div>\r\n                <div className={s.field} style={{marginTop: 15}}>\r\n\r\n                    {\r\n                        props.profile.contacts.facebook ||\r\n                        props.profile.contacts.vk ||\r\n                        props.profile.contacts.twitter ||\r\n                        props.profile.contacts.instagram ||\r\n                        props.profile.contacts.mainLink ||\r\n                        props.profile.contacts.github ||\r\n                        props.profile.contacts.website ||\r\n                        props.profile.contacts.youtube\r\n\r\n                            ? <>\r\n                                <b style={{color: \"chocolate\"}}>Contacts: </b>{(Object.keys(props.profile.contacts) as Array<keyof ContactsType>).map((key, index) => {\r\n                                return <Contacts key={index} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n                            })}\r\n                            </>\r\n                            : <div>\r\n                                <b style={{color: \"chocolate\"}}>Contacts: </b>no contacts\r\n                            </div>\r\n                    }\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string | null\r\n    contactValue: string | null\r\n}\r\n\r\nconst Contacts = (props: ContactsPropsType) => {\r\n    return (\r\n        <div>\r\n            <ul className={s.field}>\r\n                {props.contactValue\r\n                    ? <li>\r\n                        <b style={{color: \"chocolate\"}}>{props.contactTitle}</b>: <a\r\n                        href={props.contactValue ? props.contactValue : \"\"}>\r\n                        {props.contactValue ? props.contactValue : \"\"}</a>\r\n                    </li>\r\n                    : null}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport {MyPostContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\n\r\nconst Profile = (props: ProfileContainerPropsType) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.container}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatusTC}\r\n                         isOwner={props.isOwner ? props.isOwner : false}\r\n                         savePhoto={props.savePhotoTC}\r\n                         changeProfileData={props.changeProfileDataTC}\r\n            />\r\n            <MyPostContainer/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {\r\n    changeProfileDataTC,\r\n    getStatusTC,\r\n    getUserProfileTC,\r\n    ProfilesType,\r\n    savePhotoTC,\r\n    updateStatusTC\r\n} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport Profile from \"./Profile\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {FormProfileDataType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfilesType\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n    isOwner?: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfileTC: (userId: number) => void\r\n    getStatusTC: (userId: number) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC: (file: Blob) => void\r\n    changeProfileDataTC: (profile: FormProfileDataType) => void\r\n}\r\nexport type ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId);\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            // if (!userId) {\r\n            //     this.props.history.push(\"/login\");\r\n            // }\r\n        }\r\n        this.props.getUserProfileTC(userId);\r\n        this.props.getStatusTC(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatusTC={this.props.updateStatusTC}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhotoTC={this.props.savePhotoTC}\r\n                     changeProfileDataTC={this.props.changeProfileDataTC}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.data.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            getUserProfileTC,\r\n            getStatusTC,\r\n            updateStatusTC,\r\n            savePhotoTC,\r\n            changeProfileDataTC\r\n        }), withRouter, withAuthRedirect)(ProfileContainer)"],"sourceRoot":""}